public with sharing class dataProduct {
    @AuraEnabled
    public static list<Product__c> product {get;set;}
    public static list<OrderItem> orderItem {get;set;}
    public static User User {get;set;}

    @AuraEnabled
    public static List<Product__c> getProduct() {  
    
        product = [SELECT Id,Name,Id__c,Price__c,Quantity__c,Picture__c,Description__c FROM Product__c ORDER BY Id__c];
        return product;
    }

    // @AuraEnabled
    // public static void updateOrder(Order order) {  
        
    // }

    // @AuraEnabled
    // public static User getUser(Order order) {  
    
    //     User = [SELECT Id,Name,SenderEmail FROM User WHERE Id=:order.CreatedById];
    //     return User;
    // }


    // @AuraEnabled
    // public static Customer__c createUser(Customer__c user,Integer total) {  
    //     user.Name= user.FirstName__c+ ' ' +user.LastName__c;
    //     user.TotalAmount__c = total;
    //     insert user;
    //     System.debug(user);
    //     return user;
    // }

    @AuraEnabled
    public static Customer__c createOrder(Customer__c user,List<Map<String, Object>> products,Integer total){
        // String productsId = products.get('Id');
        user.Name= user.FirstName__c+ ' ' +user.LastName__c;
        user.TotalAmount__c = total;
        insert user;
        System.debug(user);
        System.debug(products);
        System.debug(total);
        List<OrderItem> orderItems = new List<OrderItem>{} ;

        Order order = new Order(
            Customer__c = user.Id,
            Name = 'MyNewTestOrder',
            AccountId = '0012w00000FbgV9AAJ',
            ContractId = '8002w0000001JcnAAE',
            Pricebook2Id = '01s2w000007RUFSAA4',
            // TotalAmount = total,
            EffectiveDate = Date.today(),
            Status = 'Draft' );
        insert order;
        System.debug(order);
        System.debug(order.Customer__c);

        for(Map<String, Object> p : products){
            OrderItem orderItem = new OrderItem();
            orderItem.Product__c = (Id)p.get('Id');
            orderItem.UnitPrice = integer.valueof(p.get('Price__c'));
            orderItem.PricebookEntryId = '01u2w0000023MoLAAU';
            // orderItem.TotalPrice = integer.valueof(p.get('Total__c'));
            orderItem.Quantity = integer.valueof(p.get('orderQt'));
            orderItem.OrderId = order.Id;
            orderItems.add(orderItem);
        }  
        insert orderItems;
        System.debug(orderItems);

        return user;    
    }

    // @AuraEnabled
    // public static List<OrderItem> getOrderItem(Order order) {  
       
    //     orderItem = [SELECT Id,Product__r.Name,UnitPrice,Quantity,TotalPrice,Product__c,OrderId FROM OrderItem WHERE OrderId =:order.Id];
    //     return orderItem;
    // }

    @AuraEnabled
    public static Order getOrder(Customer__c Customer) {  
        System.debug(Customer.Id);
        Order order = [SELECT Id,Name,Status,EffectiveDate,TotalAmount,CreatedById,
                      Customer__r.Name,Customer__r.Email__c,Customer__r.Phone__c,Customer__r.TotalAmount__c,Customer__r.Address__c,
                      (SELECT TotalPrice,UnitPrice,Quantity,Product__r.Name FROM OrderItems)
                      FROM Order 
                      WHERE Customer__c = :Customer.Id];
        return order;
    }

    @AuraEnabled
    public static string processEmail(String email, String Subject, String Message){
        String sMessage='';
        try{
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String[] toAddresses = new String[] {email}; 
            mail.setToAddresses(toAddresses);
            mail.setSubject(Subject);
            mail.setHtmlBody(Message);
            Messaging.SendEmailResult [] results = Messaging.sendEmail(new Messaging.SingleEmailMessage[] {mail});
            sMessage='Success';
        }
        catch(Exception ex){
            sMessage=ex.getLineNumber()+'\n'+ex.getCause()+'\n'+ex.getMessage()+'\n'+ex.getStackTraceString();
        }
        return sMessage;
    }

    

}

